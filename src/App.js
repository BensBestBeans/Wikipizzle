import logo from './assets/wikipizzlelogo.png';
import './App.css';
import React from 'react';
import ReactMarkdown from 'react-markdown'

function getmd() {
  return `# Lau Theorem
  From Wikipedia, the free encyclopedia.
  
  
  ## Introduction
  
  In mathematics, the Lau theorem, named after Danish mathematician Poul Lau, states that every countable subset of a separable metric space is itself separable. Cras dictum orci interdum nibh laoreet, ac rutrum ipsum rutrum. Aenean aliquam velit eu purus aliquet pretium. In ut ipsum ut justo blandit tristique ac vel urna. Etiam molestie ligula sapien, nec pharetra enim suscipit et. Praesent ultrices velit id ligula lobortis consequat. Praesent id tortor lorem. Vivamus vestibulum metus dui, at efficitur metus egestas quis. Nullam malesuada justo enim, feugiat lobortis quam convallis ac. Nullam nec justo nunc. Duis rutrum felis a ultrices viverra. In luctus accumsan turpis, fermentum tincidunt erat auctor id. Mauris semper nunc quis massa suscipit placerat. Integer vel semper urna.
  
  ## Definition
  
  A separable metric space is a metric space in which every countable subset is itself a metric space. Cras dictum orci interdum nibh laoreet, ac rutrum ipsum rutrum. Aenean aliquam velit eu purus aliquet pretium. In ut ipsum ut justo blandit tristique ac vel urna. Etiam molestie ligula sapien, nec pharetra enim suscipit et. Praesent ultrices velit id ligula lobortis consequat. Praesent id tortor lorem.

  
  ## See also
  
   separable metric space
  
  
  ## References
  
  [1] Poul Lau. "The Lau theorem." Bull. Amer. Math. Soc. 78 (1972): 1063-1064.
  `
}

const md = getmd();
const mdtype = false;


class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {page: 0, mode: 'up'};
    this.epic = 'TEXT TIME'


    // This binding is necessary to make `this` work in the callback
    this.guessed = this.guessed.bind(this);
    this.home = this.home.bind(this);
    this.listenScrollEvent = this.listenScrollEvent.bind(this);
    this.wholePage = this.wholePage.bind(this);
  }

  head = (
  <div>
    {/* <h1 className="title">Wikipizzle</h1> */}
    <h2 className="subtitle">Wikipedia or AI-Generated? Take a guess and test your gut!</h2>
  </div>
)

  topbar = () => {return (
    <div className="logo-header">
      <img src={logo} alt=""/><h1>Wikipizzle</h1>
    </div>
  )};

  choose = () => (
    // <body>
    <div className="app">
    {/* <header> {this.topbar()} </header> */}
    
    {this.head}
    
      <div className='article-container'><div className='article'> 
      <ReactMarkdown>
      {md}
      </ReactMarkdown> 
      </div></div>
    
    
    <div className='ins'> 
    <div className='button-container'> <button className="button1" role="button" onClick={() => this.guessed(true)}><span>WIKIPEDIA</span></button> </div>
    <div className='button-container'> <button className="button2" role="button" onClick={() => this.guessed(false)}><span>AI GENERATED</span></button> </div>
    </div>
    </div>
    // </body>
    );
    
    correct = (
      <div className="app">
      <header> </header>
      {this.head}
      <div className='answer-box'>
      something
      </div>
      <div className='article'> something</div>
      <div className='ins'>
      <button className="button1" role="button" onClick={() => this.home()}><span>HOME</span></button>
      </div>
      </div>
    );

    chosen = () => (
      <div className="app">
      {this.head}

      <div className='all-wrapper'>
        {/* epic so true! */}

        <div className='left-wrapper'>
          
          <div className='chosen-article'>
        <div className='article'>
          <ReactMarkdown>
            {md}
          </ReactMarkdown>
        </div>
        </div>
        <div className='learn-more'>
            asd
          </div>
      </div>

      <div className='right-wrapper'>
      <div className='answer-box'>
        <h2>{(this.state.page == 1) ? 'Correct' : 'Incorrect'}</h2>
        <h3>{(this.state.page == 1) ? 'You\'re right!' : 'You have been deceived!'} Today's article {mdtype ? 'was an actual Wikipedia article' : 'was generated by AI'}</h3>
      </div>
      <div className='stats'>epicc</div>

      {/* <div className='padded'>
        This . Better luck next time.
      </div> */}

      {/* <div className='article'>
        <ReactMarkdown>
          {md}
        </ReactMarkdown>
      </div> */}

      </div>

      </div>

      {/* <div className='ins'>
      <button className="button1" role="button" onClick={() => this.home()}><span>HOME</span></button>
      </div> */}
      </div>
    );

  learn = (
    <div></div>
  )

  guessed(x) {
    if (x == mdtype) {
      this.setState({page: 1});
    } else {
      this.setState({page: 2});
    }
  }

  home() {
    this.setState({page: 0})
  }

  handleClick() {
    this.setState(prevState => ({
      isToggleOn: !prevState.isToggleOn
    }));
  }

  listenScrollEvent = e => {
    const elem = document.getElementById('scroll');

    if (elem.scrollTop > elem.clientHeight/2) {
      this.setState({mode: 'down'});
    } else {
      this.setState({mode: 'up'});
    }
    // console.log("skrrrt");
  }

  componentDidMount() {
    document.getElementById('scroll').addEventListener('scroll', this.listenScrollEvent);
  }

  scroll = () => {
    if (this.state.mode == 'down') {
      document.getElementById('guess').scrollIntoView({behavior: 'smooth'});
    } else {
      document.getElementById('explore').scrollIntoView({behavior: 'smooth'});
    }
  };

  guess = () => {
    const out = this.topbar()

    if (this.state.page == 0) {
      return <>{out} {this.choose()}</>;
    } else {
      return <>{out} {this.chosen()}</>;
    }
  }

  explore = () => (
    <div>
      sadboi hours
    </div>
  );

  wholePage = () => {return (
    <div className='page-container'>
    <div className='page-container-head'> {this.topbar()} </div>
    <div className='page-container-scroll' id='scroll'>
      <div className='page-container-guess' id='guess'> {this.guess()} </div>
      <div className='page-container-switch' onClick={this.scroll}> 
        {(this.state.mode == 'up') ? <div className='page-container-switch-button'>Exploration Mode</div> :  <div className='page-container-switch-button'>Play Mode</div>}
        {/* <div className='page-container-switch-button'>â‡•</div> */}
      </div>
      <div className='page-container-explore' id='explore'> {this.explore()} </div>
    </div>
    </div>
  )};

  render () {
    return this.wholePage();
  }
}

// function tick() {
//   const element = (
//     <div>
//       <h1>Hello, world!</h1>
//       <h2>It is {new Date().toLocaleTimeString()}.</h2>
//     </div>
//   );
//   App.render();
// }

// setInterval(tick, 1000);

export default App;
